{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\albio\\\\OneDrive\\\\Desktop\\\\vercel-fullstack\\\\client\\\\src\\\\Dashboards\\\\Dashboard\\\\CardCrypto\\\\CryptoCards.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport 'chart.js/auto';\nimport './CryptoCards.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CryptoCards = () => {\n  _s();\n  const [cryptoData, setCryptoData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('https://api.coinlore.net/api/tickers/');\n        const selectedCoins = response.data.data.slice(0, 6); // Get data for 5 coins\n\n        const coinsWithChart = selectedCoins.map(coin => {\n          const prices = Array.from({\n            length: 12\n          }, () => Math.random() * coin.price_usd); // Simulate 12 months of price data\n          const isIncreasing = prices[prices.length - 1] > prices[0];\n          return {\n            name: coin.name,\n            price: parseFloat(coin.price_usd).toFixed(2),\n            logo: `https://www.coinlore.com/img/${coin.nameid}.png`,\n            // Coinlore provides logos\n            chartData: {\n              labels: Array.from({\n                length: 12\n              }, (_, i) => `${i + 1}m`),\n              datasets: [{\n                data: prices,\n                borderColor: isIncreasing ? 'green' : 'red',\n                borderWidth: 2,\n                fill: false,\n                tension: 0.4\n              }]\n            }\n          };\n        });\n        setCryptoData(coinsWithChart);\n        setLoading(false);\n      } catch (err) {\n        setError('Error fetching data');\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"crypto-cards-container\",\n    children: cryptoData.map(coin => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"crypto-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"coin-name\",\n          children: coin.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"coin-price\",\n          children: [\"$\", coin.price]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: coin.logo,\n          alt: `${coin.name} logo`,\n          className: \"coin-logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          data: coin.chartData,\n          options: {\n            plugins: {\n              legend: {\n                display: false\n              }\n            },\n            scales: {\n              x: {\n                display: false\n              },\n              y: {\n                display: false\n              }\n            },\n            elements: {\n              point: {\n                radius: 0\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, coin.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(CryptoCards, \"dCOdhFsjlCT+BgsULQy2+7Qa3ZE=\");\n_c = CryptoCards;\nexport default CryptoCards;\nvar _c;\n$RefreshReg$(_c, \"CryptoCards\");","map":{"version":3,"names":["React","useState","useEffect","Line","axios","jsxDEV","_jsxDEV","CryptoCards","_s","cryptoData","setCryptoData","loading","setLoading","error","setError","fetchData","response","get","selectedCoins","data","slice","coinsWithChart","map","coin","prices","Array","from","length","Math","random","price_usd","isIncreasing","name","price","parseFloat","toFixed","logo","nameid","chartData","labels","_","i","datasets","borderColor","borderWidth","fill","tension","err","children","fileName","_jsxFileName","lineNumber","columnNumber","className","src","alt","options","plugins","legend","display","scales","x","y","elements","point","radius","_c","$RefreshReg$"],"sources":["C:/Users/albio/OneDrive/Desktop/vercel-fullstack/client/src/Dashboards/Dashboard/CardCrypto/CryptoCards.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport 'chart.js/auto';\r\nimport './CryptoCards.scss';\r\n\r\nconst CryptoCards = () => {\r\n  const [cryptoData, setCryptoData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get('https://api.coinlore.net/api/tickers/');\r\n        const selectedCoins = response.data.data.slice(0, 6); // Get data for 5 coins\r\n\r\n        const coinsWithChart = selectedCoins.map((coin) => {\r\n          const prices = Array.from({ length: 12 }, () => Math.random() * coin.price_usd); // Simulate 12 months of price data\r\n          const isIncreasing = prices[prices.length - 1] > prices[0];\r\n\r\n          return {\r\n            name: coin.name,\r\n            price: parseFloat(coin.price_usd).toFixed(2),\r\n            logo: `https://www.coinlore.com/img/${coin.nameid}.png`, // Coinlore provides logos\r\n            chartData: {\r\n              labels: Array.from({ length: 12 }, (_, i) => `${i + 1}m`),\r\n              datasets: [\r\n                {\r\n                  data: prices,\r\n                  borderColor: isIncreasing ? 'green' : 'red',\r\n                  borderWidth: 2,\r\n                  fill: false,\r\n                  tension: 0.4,\r\n                },\r\n              ],\r\n            },\r\n          };\r\n        });\r\n\r\n        setCryptoData(coinsWithChart);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        setError('Error fetching data');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>{error}</p>;\r\n\r\n  return (\r\n    <div className=\"crypto-cards-container\">\r\n      {cryptoData.map((coin) => (\r\n        <div key={coin.name} className=\"crypto-card\">\r\n          <div className=\"card-header\">\r\n            <span className=\"coin-name\">{coin.name}</span>\r\n            <span className=\"coin-price\">${coin.price}</span>\r\n          </div>\r\n          <div className=\"card-body\">\r\n            <img src={coin.logo} alt={`${coin.name} logo`} className=\"coin-logo\" />\r\n            <Line\r\n              data={coin.chartData}\r\n              options={{\r\n                plugins: { legend: { display: false } },\r\n                scales: { x: { display: false }, y: { display: false } },\r\n                elements: { point: { radius: 0 } },\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CryptoCards;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}